/**
* Transitions
*/
@mixin transition($transition-property, $transition-duration: 0.1s, $transition-timing-function: ease-in-out) {
  -webkit-transition: $transition-property $transition-duration $transition-timing-function;
  -moz-transition: $transition-property $transition-duration $transition-timing-function;
  -ms-transition: $transition-property $transition-duration $transition-timing-function;
  -o-transition: $transition-property $transition-duration $transition-timing-function;
  transition: $transition-property $transition-duration $transition-timing-function;
}

@mixin flex-align-items($property) {
  -webkit-box-align: $property;
  -webkit-align-items: $property;
  -moz-box-align: $property;
  -ms-flex-align: $property; 
}

/**
* Stepper - Builds a series of classes with a stepped loop
*
* @param $property string -> a css property (e.g. 'border-top')
* @param $from integer -> a loop counter start
* @param $through integer -> a loop counter end
* @param $steps integer -> an increment value for each iteration
* @param $unit string -> a unit value (e.g. 'px' or 'em')
*
* Example / Result:
* -------------------------------------------------------------
* .stepper { @include stepper('border-top', 1, 3, 50, em); }
*
* .stepper--50  { border-top: 50em; }
* .stepper--100 { border-top: 100em; }
* .stepper--150 { border-top: 150em; }
* --------------------------------------------------------------
*
*/

@mixin stepper($property, $from, $through, $step: 5, $unit: px) {
  @for $i from $from through $through {
    &--#{$i * $step} {
      #{$property}: ($i * $step) * 1#{$unit};
    }
  }
}

/**
* Gradient Mask - Adds a white mask to the background
*
* @param $direction string -> the gradient direction (either 'top' or 'bottom')
* @param $offset string -> the gradient offset in percent
*/
@mixin gradientmask($direction:bottom, $offset:50%) {
  background: -webkit-linear-gradient(
                  $direction,
                  rgba(255, 255, 255, 0) 0%,
                  rgba(255, 255, 255, 0.1) $offset,
                  rgba(255, 255, 255, 1) $offset,
                  rgba(255, 255, 255, 1) 100%
  );
}

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Opacity

@mixin opacity($value) {
  opacity: $value;
  filter: alpha(opacity=#{$value * 100});
}

// Border radius.

@mixin border-radius($radius, $important: '') {
  -webkit-border-radius: $radius#{$important};
  -moz-border-radius: $radius#{$important};
  -ms-border-radius: $radius#{$important};  
  -o-border-radius: $radius#{$important};  
  border-radius: $radius#{$important}; 
}

// Placeholder text
// -------------------------
@mixin placeholder($color: $input-color-placeholder) {
  &::-moz-placeholder           { color: $color; opacity: 1; } // See https://github.com/twbs/bootstrap/pull/11526
  &:-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

// Drop shadows
// By default set to: none
@mixin box-shadow($shadow) {
  -webkit-box-shadow: none; // iOS <4.3 & Android <4.1
          box-shadow: none;
}

// Vertical gradient, from top to bottom
// By default set to: none
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: none;
  background-image: none;
}

@mixin porlet-background($name, $color) {
  .portlet > .portlet-body.#{$name}, 
  .portlet.#{$name} {
      background-color: $color;
  }
}
//@include porlet-background("red", $metronic-red);

@mixin porlet-solid($name, $color) {

  .portlet.solid.#{$name} {

    > .portlet-title,
    > .portlet-body {
        border: 0;
        color: $color;
    }
  }
}
//@include porlet-solid("red", $metronic-blue-text);

@mixin porlet-box($name, $color, $text-color) {

  .portlet.box.#{$name} {  
    border: 1px solid lighten($color, 10%); 
    border-top: 0;

    > .portlet-title {
      background-color: $color;
    }
  }
}

//@include porlet-box("red", $metronic-red, $metronic-red-text);

// Button variants
// -------------------------
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &:active,
  &.active {
    color: $color;
    background-color: darken($background, 7%);
    @if $border != "" { border-color: darken($border, 10%); }
  }
  .open & { &.dropdown-toggle {
    color: $color;
    background-color: darken($background, 7%);
    @if $border != "" { border-color: darken($border, 10%); } 
  } }
  &:active,
  &.active {
    background-image: none;
    background-color: darken($background, 12%);

    &:hover {
      background-color: darken($background, 10%);  
    }
  }
  .open & { &.dropdown-toggle {
    background-image: none;
  } }
  &.disabled, 
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      background-color: $background;
      @if $border != "" { border-color: $border; }
    }
  }

  .badge {
    color: $background;
    background-color: $color;
  }
}

// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {
  // Color the label and help text
  .help-block,
  .help-inline, 
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline  {
    color: $text-color;
  }
  // Set the border and box shadow on specific inputs to match
  .form-control {
    border-color: $border-color;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
    &:focus {
      border-color: darken($border-color, 10%);
      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);
      @include box-shadow($shadow);
    }
  }
  // Set validation states also for addons
  .input-group-addon {
    color: $text-color;
    border-color: $border-color;
    background-color: $background-color;
  }
  // Optional feedback icon
  .form-control-feedback {
    color: $text-color;
  }
}

//##  Flat UI Color Variations
//
// Color variations can be used for Metronic components, such as portlets, buttons, dashboard stats.  

@mixin flatui-color-variant($name, $color, $text-color) {
  
  /* Button */
  .#{$name} {
    &.btn {
      @include button-variant($text-color, $color, "");
    }
  }

  /* Button Strip */
  .btn.#{$name}-stripe {
    border-left: 3px solid $color;
  }  

  /* Portlet */
  @include porlet-background($name, $color);
  @include porlet-solid($name, $text-color);
  @include porlet-box($name, $color, $text-color); 

  /* General Element */
  .bg-#{$name} {
    border-color: $color !important;
    background-image: none !important;
      background-color: $color !important;
      color: $text-color !important;
  }

  /* General Text & Icon Font Colors */
  .font-#{$name} {
    color: $color !important;
  }

  .progress-bar.#{$name} {
    background: $color !important;
    color: $text-color !important;
  }
  
  .border-#{$name} {
    border-color: $color !important;
  }
}